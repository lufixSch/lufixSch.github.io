import{S as yo,i as wo,s as Ao,w as Cl,x as ko,y as xo,z as Ro,A as Co,B as Lo,r as Oo,v as Po,C as qo,D as Eo,e as o,t as n,a as f,c as i,b as s,d as a,f as l,g as p,h as Io,j as c,k as t,n as Mo}from"./index.e23b10ae.js";import{A as Uo}from"./article.e19d21fa.js";function So(S){let u,I,b,y,d,_,k,O,tt,P,lt,ot,Pe,T,it,qe,v,oe,st,nt,ie,at,rt,se,ct,ft,ne,pt,Me,D,ut,Ue,x,H,dt,q,ae,mt,ht,re,_t,vt,$,Lt,M,ce,Et,It,fe,bt,Se,W,yt,Te,m,j,pe,wt,At,kt,K,ue,xt,Rt,Ct,N,de,Ot,Pt,qt,B,me,Mt,Ut,St,F,he,Tt,Dt,Ht,z,_e,$t,Wt,De,G,jt,He,Q,Kt,$e,V,Nt,We,J,Bt,je,X,Ft,Ke,L,ve,zt,Gt,Le,Qt,Vt,Ee,Jt,Xt,Ie,Yt,Ne,Y,Zt,Be,h,be,gt,el,ye,tl,ll,Z,ol,we,il,sl,Ae,nl,al,ke,rl,Fe,g,cl,ze,ee,xe,fl,Ge,te,pl,Qe,w,Re,ul,dl,U,ml,Ce,hl,_l,vl,Oe,Ll,Ve,Je;return{c(){u=o("h1"),I=n("LocalCompletion"),b=f(),y=o("p"),d=n("Local LLM based code completion like Copilot."),_=f(),k=o("blockquote"),O=o("p"),tt=n("This extension does not come with a built in backend for running LLMs. Instead you are able to use any existing tool that supports the OpenAI API format. Like the "),P=o("a"),lt=n("Oobabooga WebUI"),ot=n(" and many other"),Pe=f(),T=o("h2"),it=n("Features"),qe=f(),v=o("ul"),oe=o("li"),st=n("Inline (multi line) code completion"),nt=f(),ie=o("li"),at=n("Works with any OpenAI compatible API"),rt=f(),se=o("li"),ct=n("Save multiple API Endpoints and switch easily between them"),ft=f(),ne=o("li"),pt=n("Reducing requests to LLMs by saving previous responses"),Me=f(),D=o("h3"),ut=n("Roadmap"),Ue=f(),x=o("ul"),H=o("li"),dt=n("Improve (optional) features to reduce LLM requests"),q=o("ul"),ae=o("li"),mt=n("Increase time between keystrokes before requesting a new completion"),ht=f(),re=o("li"),_t=n("Add option (possible regex) to specify after which characters the LLM should be/not be triggered"),vt=f(),$=o("li"),Lt=n("Increase context"),M=o("ul"),ce=o("li"),Et=n("Add content after cursor to prompt"),It=f(),fe=o("li"),bt=n("Add content of other files"),Se=f(),W=o("h2"),yt=n("Extension Settings"),Te=f(),m=o("ul"),j=o("li"),pe=o("code"),wt=n("localcompletion.active_endpoint"),At=n(": The URL of the API which is used for generating the code completion"),kt=f(),K=o("li"),ue=o("code"),xt=n("localcompletion.endpoints"),Rt=n(": List of URL endpoints"),Ct=f(),N=o("li"),de=o("code"),Ot=n("localcompletion.temperature"),Pt=n(": Temperature of the LLM"),qt=f(),B=o("li"),me=o("code"),Mt=n("localcompletion.max_tokens"),Ut=n(": Maximum number of tokens in the response"),St=f(),F=o("li"),he=o("code"),Tt=n("localcompletion.stop_sequences"),Dt=n(": Additional stop sequences (max. 2)"),Ht=f(),z=o("li"),_e=o("code"),$t=n("localcompletion.reduce_calls"),Wt=n(": Reduce API calls with various strategies (e.g. skip completion if last symbol was a letter)"),De=f(),G=o("h2"),jt=n("Known Issues"),He=f(),Q=o("p"),Kt=n("The extension does not yet support a custom API key. This means it only works for APIs which do not need a key."),$e=f(),V=o("p"),Nt=n("Model switching is not supported at the moment as most local tools don’t support that property either."),We=f(),J=o("h2"),Bt=n("Release Notes"),je=f(),X=o("h3"),Ft=n("0.0.4"),Ke=f(),L=o("ul"),ve=o("li"),zt=n("Distinguish between single line and multiline completion by checking text after the cursor"),Gt=f(),Le=o("li"),Qt=n("Add ‘\\n’ to stop token for single line"),Vt=f(),Ee=o("li"),Jt=n("Reduce repetition of already existing symbols (like ’}’ or ’;’) at the end of a completion"),Xt=f(),Ie=o("li"),Yt=n("Remove completion from history for new line (most predictions where totally wrong)"),Ne=f(),Y=o("h3"),Zt=n("0.0.3"),Be=f(),h=o("ul"),be=o("li"),gt=n("Rework handling of old responses"),el=f(),ye=o("li"),tl=n("Only call new completion if input deviates from previous completion"),ll=f(),Z=o("li"),ol=n("Add new Command: "),we=o("strong"),il=n("Regenerate"),sl=f(),Ae=o("li"),nl=n("Custom stop sequences"),al=f(),ke=o("li"),rl=n("Optionally reduce API calls (enabled by default)"),Fe=f(),g=o("h3"),cl=n("0.0.2"),ze=f(),ee=o("ul"),xe=o("li"),fl=n("Reduce unnecessary requests"),Ge=f(),te=o("h3"),pl=n("0.0.1"),Qe=f(),w=o("ul"),Re=o("li"),ul=n("Add basic completion"),dl=f(),U=o("li"),ml=n("Save "),Ce=o("code"),hl=n("10"),_l=n(" old responses to reduce LLM requests"),vl=f(),Oe=o("li"),Ll=n("Add some settings to configure the extension"),Ve=f(),Je=o("hr"),this.h()},l(e){u=i(e,"H1",{});var r=s(u);I=a(r,"LocalCompletion"),r.forEach(l),b=p(e),y=i(e,"P",{});var Ol=s(y);d=a(Ol,"Local LLM based code completion like Copilot."),Ol.forEach(l),_=p(e),k=i(e,"BLOCKQUOTE",{});var Pl=s(k);O=i(Pl,"P",{});var Xe=s(O);tt=a(Xe,"This extension does not come with a built in backend for running LLMs. Instead you are able to use any existing tool that supports the OpenAI API format. Like the "),P=i(Xe,"A",{href:!0,rel:!0});var ql=s(P);lt=a(ql,"Oobabooga WebUI"),ql.forEach(l),ot=a(Xe," and many other"),Xe.forEach(l),Pl.forEach(l),Pe=p(e),T=i(e,"H2",{});var Ml=s(T);it=a(Ml,"Features"),Ml.forEach(l),qe=p(e),v=i(e,"UL",{});var R=s(v);oe=i(R,"LI",{});var Ul=s(oe);st=a(Ul,"Inline (multi line) code completion"),Ul.forEach(l),nt=p(R),ie=i(R,"LI",{});var Sl=s(ie);at=a(Sl,"Works with any OpenAI compatible API"),Sl.forEach(l),rt=p(R),se=i(R,"LI",{});var Tl=s(se);ct=a(Tl,"Save multiple API Endpoints and switch easily between them"),Tl.forEach(l),ft=p(R),ne=i(R,"LI",{});var Dl=s(ne);pt=a(Dl,"Reducing requests to LLMs by saving previous responses"),Dl.forEach(l),R.forEach(l),Me=p(e),D=i(e,"H3",{});var Hl=s(D);ut=a(Hl,"Roadmap"),Hl.forEach(l),Ue=p(e),x=i(e,"UL",{});var Ye=s(x);H=i(Ye,"LI",{});var El=s(H);dt=a(El,"Improve (optional) features to reduce LLM requests"),q=i(El,"UL",{});var Ze=s(q);ae=i(Ze,"LI",{});var $l=s(ae);mt=a($l,"Increase time between keystrokes before requesting a new completion"),$l.forEach(l),ht=p(Ze),re=i(Ze,"LI",{});var Wl=s(re);_t=a(Wl,"Add option (possible regex) to specify after which characters the LLM should be/not be triggered"),Wl.forEach(l),Ze.forEach(l),El.forEach(l),vt=p(Ye),$=i(Ye,"LI",{});var Il=s($);Lt=a(Il,"Increase context"),M=i(Il,"UL",{});var ge=s(M);ce=i(ge,"LI",{});var jl=s(ce);Et=a(jl,"Add content after cursor to prompt"),jl.forEach(l),It=p(ge),fe=i(ge,"LI",{});var Kl=s(fe);bt=a(Kl,"Add content of other files"),Kl.forEach(l),ge.forEach(l),Il.forEach(l),Ye.forEach(l),Se=p(e),W=i(e,"H2",{});var Nl=s(W);yt=a(Nl,"Extension Settings"),Nl.forEach(l),Te=p(e),m=i(e,"UL",{});var E=s(m);j=i(E,"LI",{});var bl=s(j);pe=i(bl,"CODE",{});var Bl=s(pe);wt=a(Bl,"localcompletion.active_endpoint"),Bl.forEach(l),At=a(bl,": The URL of the API which is used for generating the code completion"),bl.forEach(l),kt=p(E),K=i(E,"LI",{});var yl=s(K);ue=i(yl,"CODE",{});var Fl=s(ue);xt=a(Fl,"localcompletion.endpoints"),Fl.forEach(l),Rt=a(yl,": List of URL endpoints"),yl.forEach(l),Ct=p(E),N=i(E,"LI",{});var wl=s(N);de=i(wl,"CODE",{});var zl=s(de);Ot=a(zl,"localcompletion.temperature"),zl.forEach(l),Pt=a(wl,": Temperature of the LLM"),wl.forEach(l),qt=p(E),B=i(E,"LI",{});var Al=s(B);me=i(Al,"CODE",{});var Gl=s(me);Mt=a(Gl,"localcompletion.max_tokens"),Gl.forEach(l),Ut=a(Al,": Maximum number of tokens in the response"),Al.forEach(l),St=p(E),F=i(E,"LI",{});var kl=s(F);he=i(kl,"CODE",{});var Ql=s(he);Tt=a(Ql,"localcompletion.stop_sequences"),Ql.forEach(l),Dt=a(kl,": Additional stop sequences (max. 2)"),kl.forEach(l),Ht=p(E),z=i(E,"LI",{});var xl=s(z);_e=i(xl,"CODE",{});var Vl=s(_e);$t=a(Vl,"localcompletion.reduce_calls"),Vl.forEach(l),Wt=a(xl,": Reduce API calls with various strategies (e.g. skip completion if last symbol was a letter)"),xl.forEach(l),E.forEach(l),De=p(e),G=i(e,"H2",{});var Jl=s(G);jt=a(Jl,"Known Issues"),Jl.forEach(l),He=p(e),Q=i(e,"P",{});var Xl=s(Q);Kt=a(Xl,"The extension does not yet support a custom API key. This means it only works for APIs which do not need a key."),Xl.forEach(l),$e=p(e),V=i(e,"P",{});var Yl=s(V);Nt=a(Yl,"Model switching is not supported at the moment as most local tools don’t support that property either."),Yl.forEach(l),We=p(e),J=i(e,"H2",{});var Zl=s(J);Bt=a(Zl,"Release Notes"),Zl.forEach(l),je=p(e),X=i(e,"H3",{});var gl=s(X);Ft=a(gl,"0.0.4"),gl.forEach(l),Ke=p(e),L=i(e,"UL",{});var C=s(L);ve=i(C,"LI",{});var eo=s(ve);zt=a(eo,"Distinguish between single line and multiline completion by checking text after the cursor"),eo.forEach(l),Gt=p(C),Le=i(C,"LI",{});var to=s(Le);Qt=a(to,"Add ‘\\n’ to stop token for single line"),to.forEach(l),Vt=p(C),Ee=i(C,"LI",{});var lo=s(Ee);Jt=a(lo,"Reduce repetition of already existing symbols (like ’}’ or ’;’) at the end of a completion"),lo.forEach(l),Xt=p(C),Ie=i(C,"LI",{});var oo=s(Ie);Yt=a(oo,"Remove completion from history for new line (most predictions where totally wrong)"),oo.forEach(l),C.forEach(l),Ne=p(e),Y=i(e,"H3",{});var io=s(Y);Zt=a(io,"0.0.3"),io.forEach(l),Be=p(e),h=i(e,"UL",{});var A=s(h);be=i(A,"LI",{});var so=s(be);gt=a(so,"Rework handling of old responses"),so.forEach(l),el=p(A),ye=i(A,"LI",{});var no=s(ye);tl=a(no,"Only call new completion if input deviates from previous completion"),no.forEach(l),ll=p(A),Z=i(A,"LI",{});var Rl=s(Z);ol=a(Rl,"Add new Command: "),we=i(Rl,"STRONG",{});var ao=s(we);il=a(ao,"Regenerate"),ao.forEach(l),Rl.forEach(l),sl=p(A),Ae=i(A,"LI",{});var ro=s(Ae);nl=a(ro,"Custom stop sequences"),ro.forEach(l),al=p(A),ke=i(A,"LI",{});var co=s(ke);rl=a(co,"Optionally reduce API calls (enabled by default)"),co.forEach(l),A.forEach(l),Fe=p(e),g=i(e,"H3",{});var fo=s(g);cl=a(fo,"0.0.2"),fo.forEach(l),ze=p(e),ee=i(e,"UL",{});var po=s(ee);xe=i(po,"LI",{});var uo=s(xe);fl=a(uo,"Reduce unnecessary requests"),uo.forEach(l),po.forEach(l),Ge=p(e),te=i(e,"H3",{});var mo=s(te);pl=a(mo,"0.0.1"),mo.forEach(l),Qe=p(e),w=i(e,"UL",{});var le=s(w);Re=i(le,"LI",{});var ho=s(Re);ul=a(ho,"Add basic completion"),ho.forEach(l),dl=p(le),U=i(le,"LI",{});var et=s(U);ml=a(et,"Save "),Ce=i(et,"CODE",{});var _o=s(Ce);hl=a(_o,"10"),_o.forEach(l),_l=a(et," old responses to reduce LLM requests"),et.forEach(l),vl=p(le),Oe=i(le,"LI",{});var vo=s(Oe);Ll=a(vo,"Add some settings to configure the extension"),vo.forEach(l),le.forEach(l),Ve=p(e),Je=i(e,"HR",{}),this.h()},h(){Io(P,"href","https://github.com/oobabooga/text-generation-webui"),Io(P,"rel","nofollow")},m(e,r){c(e,u,r),t(u,I),c(e,b,r),c(e,y,r),t(y,d),c(e,_,r),c(e,k,r),t(k,O),t(O,tt),t(O,P),t(P,lt),t(O,ot),c(e,Pe,r),c(e,T,r),t(T,it),c(e,qe,r),c(e,v,r),t(v,oe),t(oe,st),t(v,nt),t(v,ie),t(ie,at),t(v,rt),t(v,se),t(se,ct),t(v,ft),t(v,ne),t(ne,pt),c(e,Me,r),c(e,D,r),t(D,ut),c(e,Ue,r),c(e,x,r),t(x,H),t(H,dt),t(H,q),t(q,ae),t(ae,mt),t(q,ht),t(q,re),t(re,_t),t(x,vt),t(x,$),t($,Lt),t($,M),t(M,ce),t(ce,Et),t(M,It),t(M,fe),t(fe,bt),c(e,Se,r),c(e,W,r),t(W,yt),c(e,Te,r),c(e,m,r),t(m,j),t(j,pe),t(pe,wt),t(j,At),t(m,kt),t(m,K),t(K,ue),t(ue,xt),t(K,Rt),t(m,Ct),t(m,N),t(N,de),t(de,Ot),t(N,Pt),t(m,qt),t(m,B),t(B,me),t(me,Mt),t(B,Ut),t(m,St),t(m,F),t(F,he),t(he,Tt),t(F,Dt),t(m,Ht),t(m,z),t(z,_e),t(_e,$t),t(z,Wt),c(e,De,r),c(e,G,r),t(G,jt),c(e,He,r),c(e,Q,r),t(Q,Kt),c(e,$e,r),c(e,V,r),t(V,Nt),c(e,We,r),c(e,J,r),t(J,Bt),c(e,je,r),c(e,X,r),t(X,Ft),c(e,Ke,r),c(e,L,r),t(L,ve),t(ve,zt),t(L,Gt),t(L,Le),t(Le,Qt),t(L,Vt),t(L,Ee),t(Ee,Jt),t(L,Xt),t(L,Ie),t(Ie,Yt),c(e,Ne,r),c(e,Y,r),t(Y,Zt),c(e,Be,r),c(e,h,r),t(h,be),t(be,gt),t(h,el),t(h,ye),t(ye,tl),t(h,ll),t(h,Z),t(Z,ol),t(Z,we),t(we,il),t(h,sl),t(h,Ae),t(Ae,nl),t(h,al),t(h,ke),t(ke,rl),c(e,Fe,r),c(e,g,r),t(g,cl),c(e,ze,r),c(e,ee,r),t(ee,xe),t(xe,fl),c(e,Ge,r),c(e,te,r),t(te,pl),c(e,Qe,r),c(e,w,r),t(w,Re),t(Re,ul),t(w,dl),t(w,U),t(U,ml),t(U,Ce),t(Ce,hl),t(U,_l),t(w,vl),t(w,Oe),t(Oe,Ll),c(e,Ve,r),c(e,Je,r)},p:Mo,d(e){e&&l(u),e&&l(b),e&&l(y),e&&l(_),e&&l(k),e&&l(Pe),e&&l(T),e&&l(qe),e&&l(v),e&&l(Me),e&&l(D),e&&l(Ue),e&&l(x),e&&l(Se),e&&l(W),e&&l(Te),e&&l(m),e&&l(De),e&&l(G),e&&l(He),e&&l(Q),e&&l($e),e&&l(V),e&&l(We),e&&l(J),e&&l(je),e&&l(X),e&&l(Ke),e&&l(L),e&&l(Ne),e&&l(Y),e&&l(Be),e&&l(h),e&&l(Fe),e&&l(g),e&&l(ze),e&&l(ee),e&&l(Ge),e&&l(te),e&&l(Qe),e&&l(w),e&&l(Ve),e&&l(Je)}}}function To(S){let u,I;const b=[S[0],bo];let y={$$slots:{default:[So]},$$scope:{ctx:S}};for(let d=0;d<b.length;d+=1)y=Cl(y,b[d]);return u=new Uo({props:y}),{c(){ko(u.$$.fragment)},l(d){xo(u.$$.fragment,d)},m(d,_){Ro(u,d,_),I=!0},p(d,[_]){const k=_&1?Co(b,[_&1&&Lo(d[0]),_&0&&Lo(bo)]):{};_&2&&(k.$$scope={dirty:_,ctx:d}),u.$set(k)},i(d){I||(Oo(u.$$.fragment,d),I=!0)},o(d){Po(u.$$.fragment,d),I=!1},d(d){qo(u,d)}}}const bo={description:"A VS Code extension for local, inline LLM based code completion using OpenAI compatible APIs like Oobabooga WebUI",image:"/articles/pcb_buttons.png",layout:"project",repository:"https://github.com/lufixSch/LocalCompletion",repository_icon:"github",status:"wip",title:"LocalCompletion",update:"https://raw.githubusercontent.com/lufixSch/LocalCompletion/main/README.md"};function Do(S,u,I){return S.$$set=b=>{I(0,u=Cl(Cl({},u),Eo(b)))},u=Eo(u),[u]}class Wo extends yo{constructor(u){super(),wo(this,u,Do,To,Ao,{})}}export{Wo as default,bo as metadata};
