import{S as Qs,i as Js,s as Xs,w as Pi,x as Ys,y as Zs,z as en,A as tn,B as Vs,r as ln,v as on,C as sn,D as Bs,e as o,t as n,a as r,c as i,b as s,d as a,f as l,g as c,h as zs,j as p,k as e,n as nn}from"./index.e23b10ae.js";import{A as an}from"./article.e19d21fa.js";function rn($){let d,y,w,x,m,b,C,O,el,S,tl,ll,Lt,W,ol,bt,E,xe,il,sl,ke,nl,al,Ae,rl,cl,j,fl,M,Re,pl,dl,Pe,ml,ul,Ce,hl,_l,Me,vl,It,K,El,yt,u,N,Ll,Ue,qe,bl,Il,V,yl,D,Oe,wl,xl,Se,kl,Al,De,Rl,Pl,B,Cl,g,ge,Ml,Ul,He,ql,Ol,z,Sl,H,Fe,Dl,gl,G,Hl,F,Te,Fl,Tl,$e,$l,Wl,Q,jl,We,je,Kl,Nl,Ke,Vl,Bl,Ne,zl,wt,J,Gl,xt,h,X,Ve,Ql,Jl,Xl,Y,Be,Yl,Zl,eo,Z,ze,to,lo,oo,ee,Ge,io,so,no,te,Qe,ao,ro,co,le,Je,fo,po,mo,oe,Xe,uo,ho,_o,ie,Ye,vo,Eo,kt,se,Lo,At,ne,bo,Rt,ae,Io,Pt,re,yo,Ct,ce,wo,Mt,fe,Ze,xo,Ut,pe,ko,qt,U,et,Ao,Ro,tt,Po,Ot,de,Co,St,me,lt,Mo,Dt,ue,Uo,gt,k,ot,qo,Oo,it,So,Do,st,go,Ht,he,Ho,Ft,I,nt,Fo,To,at,$o,Wo,rt,jo,Ko,ct,No,Tt,_e,Vo,$t,L,ft,Bo,zo,pt,Go,Qo,ve,Jo,dt,Xo,Yo,mt,Zo,ei,ut,ti,Wt,Ee,li,jt,Le,ht,oi,Kt,be,ii,Nt,A,_t,si,ni,T,ai,vt,ri,ci,fi,Et,pi,Vt,Bt;return{c(){d=o("h1"),y=n("LocalCompletion"),w=r(),x=o("p"),m=n("Local LLM based code completion like Copilot."),b=r(),C=o("blockquote"),O=o("p"),el=n("This extension does not come with a built in backend for running LLMs. Instead you are able to use any existing tool that supports the OpenAI API format. Like the "),S=o("a"),tl=n("Oobabooga WebUI"),ll=n(" and many other"),Lt=r(),W=o("h2"),ol=n("Features"),bt=r(),E=o("ul"),xe=o("li"),il=n("Inline (multi line) code completion"),sl=r(),ke=o("li"),nl=n("Works with any OpenAI compatible API"),al=r(),Ae=o("li"),rl=n("Save multiple API Endpoints and switch easily between them"),cl=r(),j=o("li"),fl=n("Reducing requests to LLMs by"),M=o("ul"),Re=o("li"),pl=n("saving previous responses"),dl=r(),Pe=o("li"),ml=n("skiping completion depending on the last symbol"),ul=r(),Ce=o("li"),hl=n("only posting request if no input was given for some time (can be specified in the settings)"),_l=r(),Me=o("li"),vl=n("Dynamically detect multi line or single line completion"),It=r(),K=o("h3"),El=n("Roadmap"),yt=r(),u=o("ul"),N=o("li"),Ll=n("Improve (optional) features to reduce LLM requests"),Ue=o("ul"),qe=o("li"),bl=n("Add option (possible regex) to specify after which characters the LLM should be/not be triggered"),Il=r(),V=o("li"),yl=n("Increase context"),D=o("ul"),Oe=o("li"),wl=n("Add content after cursor to prompt"),xl=r(),Se=o("li"),kl=n("Add content of other files"),Al=r(),De=o("li"),Rl=n("Return multiple completions (add suggestions from history)"),Pl=r(),B=o("li"),Cl=n("Improve detection of already existing symbols at the end of a completion"),g=o("ul"),ge=o("li"),Ml=n("Reduce chance of repeating already existing symbols"),Ul=r(),He=o("li"),ql=n("Reduce completion stopping because of false detection of already existing symbols"),Ol=r(),z=o("li"),Sl=n("Custom completion stopping"),H=o("ul"),Fe=o("li"),Dl=n("Stop completion after n lines"),gl=r(),G=o("li"),Hl=n("Detect bracket/brace/parenthesis imbalance and stop/don’t stop"),F=o("ul"),Te=o("li"),Fl=n("Missing closing bracket -> don’t stop"),Tl=r(),$e=o("li"),$l=n("Improve detection of already existing symbols at the end of a completion based on this"),Wl=r(),Q=o("li"),jl=n("First line preview"),We=o("ul"),je=o("li"),Kl=n("Preview the first line (and maybe more) of the completion while completion is still ongoing"),Nl=r(),Ke=o("li"),Vl=n("Enable/Disable llm completion for specific filetypes"),Bl=r(),Ne=o("li"),zl=n("Fix Error where completion is not diplayed"),wt=r(),J=o("h2"),Gl=n("Extension Settings"),xt=r(),h=o("ul"),X=o("li"),Ve=o("code"),Ql=n("localcompletion.active_endpoint"),Jl=n(": The URL of the API which is used for generating the code completion"),Xl=r(),Y=o("li"),Be=o("code"),Yl=n("localcompletion.endpoints"),Zl=n(": List of URL endpoints"),eo=r(),Z=o("li"),ze=o("code"),to=n("localcompletion.temperature"),lo=n(": Temperature of the LLM"),oo=r(),ee=o("li"),Ge=o("code"),io=n("localcompletion.max_tokens"),so=n(": Maximum number of tokens in the response"),no=r(),te=o("li"),Qe=o("code"),ao=n("localcompletion.stop_sequences"),ro=n(": Additional stop sequences (max. 2)"),co=r(),le=o("li"),Je=o("code"),fo=n("localcompletion.reduce_calls"),po=n(": Reduce API calls with various strategies (e.g. skip completion if last symbol was a letter)"),mo=r(),oe=o("li"),Xe=o("code"),uo=n("localcompletion.skip_autocomplete_widget"),ho=n(": Skip completion if autocomplete widget is active"),_o=r(),ie=o("li"),Ye=o("code"),vo=n("localcompletion.completion_timeout"),Eo=n(": Minimum time between keystrokes (in ms) before sending a completion request (Reduces API calls, which are closed immediately after)"),kt=r(),se=o("h2"),Lo=n("Known Issues"),At=r(),ne=o("p"),bo=n("The extension does not yet support a custom API key. This means it only works for APIs which do not need a key."),Rt=r(),ae=o("p"),Io=n("Model switching is not supported at the moment as most local tools don’t support that property either."),Pt=r(),re=o("h2"),yo=n("Release Notes"),Ct=r(),ce=o("h3"),wo=n("0.1.2 (WIP)"),Mt=r(),fe=o("ul"),Ze=o("li"),xo=n("Add dynamic stopping based on line count and code balance"),Ut=r(),pe=o("h3"),ko=n("0.1.1"),qt=r(),U=o("ul"),et=o("li"),Ao=n("Fix race condition error which crashed the extension"),Ro=r(),tt=o("li"),Po=n("Fix extra space at the start of single line completion"),Ot=r(),de=o("h3"),Co=n("0.1.0"),St=r(),me=o("ul"),lt=o("li"),Mo=n("Publish to Visual Studio Marketplace"),Dt=r(),ue=o("h3"),Uo=n("0.0.5"),gt=r(),k=o("ul"),ot=o("li"),qo=n("Increase time between keystrokes before requesting a new completion"),Oo=r(),it=o("li"),So=n("Show inline completion even if autocomplet widget is active (can be disabled)"),Do=r(),st=o("li"),go=n("Fix bug where sometimes a running completion would not be stopped if a new completion is triggered"),Ht=r(),he=o("h3"),Ho=n("0.0.4"),Ft=r(),I=o("ul"),nt=o("li"),Fo=n("Distinguish between single line and multiline completion by checking text after the cursor"),To=r(),at=o("li"),$o=n("Add ‘\\n’ to stop token for single line"),Wo=r(),rt=o("li"),jo=n("Reduce repetition of already existing symbols (like ’}’ or ’;’) at the end of a completion"),Ko=r(),ct=o("li"),No=n("Remove completion from history for new line (most predictions where totally wrong)"),Tt=r(),_e=o("h3"),Vo=n("0.0.3"),$t=r(),L=o("ul"),ft=o("li"),Bo=n("Rework handling of old responses"),zo=r(),pt=o("li"),Go=n("Only call new completion if input deviates from previous completion"),Qo=r(),ve=o("li"),Jo=n("Add new Command: "),dt=o("strong"),Xo=n("Regenerate"),Yo=r(),mt=o("li"),Zo=n("Custom stop sequences"),ei=r(),ut=o("li"),ti=n("Optionally reduce API calls (enabled by default)"),Wt=r(),Ee=o("h3"),li=n("0.0.2"),jt=r(),Le=o("ul"),ht=o("li"),oi=n("Reduce unnecessary requests"),Kt=r(),be=o("h3"),ii=n("0.0.1"),Nt=r(),A=o("ul"),_t=o("li"),si=n("Add basic completion"),ni=r(),T=o("li"),ai=n("Save "),vt=o("code"),ri=n("10"),ci=n(" old responses to reduce LLM requests"),fi=r(),Et=o("li"),pi=n("Add some settings to configure the extension"),Vt=r(),Bt=o("hr"),this.h()},l(t){d=i(t,"H1",{});var f=s(d);y=a(f,"LocalCompletion"),f.forEach(l),w=c(t),x=i(t,"P",{});var Ci=s(x);m=a(Ci,"Local LLM based code completion like Copilot."),Ci.forEach(l),b=c(t),C=i(t,"BLOCKQUOTE",{});var Mi=s(C);O=i(Mi,"P",{});var zt=s(O);el=a(zt,"This extension does not come with a built in backend for running LLMs. Instead you are able to use any existing tool that supports the OpenAI API format. Like the "),S=i(zt,"A",{href:!0,rel:!0});var Ui=s(S);tl=a(Ui,"Oobabooga WebUI"),Ui.forEach(l),ll=a(zt," and many other"),zt.forEach(l),Mi.forEach(l),Lt=c(t),W=i(t,"H2",{});var qi=s(W);ol=a(qi,"Features"),qi.forEach(l),bt=c(t),E=i(t,"UL",{});var R=s(E);xe=i(R,"LI",{});var Oi=s(xe);il=a(Oi,"Inline (multi line) code completion"),Oi.forEach(l),sl=c(R),ke=i(R,"LI",{});var Si=s(ke);nl=a(Si,"Works with any OpenAI compatible API"),Si.forEach(l),al=c(R),Ae=i(R,"LI",{});var Di=s(Ae);rl=a(Di,"Save multiple API Endpoints and switch easily between them"),Di.forEach(l),cl=c(R),j=i(R,"LI",{});var di=s(j);fl=a(di,"Reducing requests to LLMs by"),M=i(di,"UL",{});var Ie=s(M);Re=i(Ie,"LI",{});var gi=s(Re);pl=a(gi,"saving previous responses"),gi.forEach(l),dl=c(Ie),Pe=i(Ie,"LI",{});var Hi=s(Pe);ml=a(Hi,"skiping completion depending on the last symbol"),Hi.forEach(l),ul=c(Ie),Ce=i(Ie,"LI",{});var Fi=s(Ce);hl=a(Fi,"only posting request if no input was given for some time (can be specified in the settings)"),Fi.forEach(l),Ie.forEach(l),di.forEach(l),_l=c(R),Me=i(R,"LI",{});var Ti=s(Me);vl=a(Ti,"Dynamically detect multi line or single line completion"),Ti.forEach(l),R.forEach(l),It=c(t),K=i(t,"H3",{});var $i=s(K);El=a($i,"Roadmap"),$i.forEach(l),yt=c(t),u=i(t,"UL",{});var _=s(u);N=i(_,"LI",{});var mi=s(N);Ll=a(mi,"Improve (optional) features to reduce LLM requests"),Ue=i(mi,"UL",{});var Wi=s(Ue);qe=i(Wi,"LI",{});var ji=s(qe);bl=a(ji,"Add option (possible regex) to specify after which characters the LLM should be/not be triggered"),ji.forEach(l),Wi.forEach(l),mi.forEach(l),Il=c(_),V=i(_,"LI",{});var ui=s(V);yl=a(ui,"Increase context"),D=i(ui,"UL",{});var Gt=s(D);Oe=i(Gt,"LI",{});var Ki=s(Oe);wl=a(Ki,"Add content after cursor to prompt"),Ki.forEach(l),xl=c(Gt),Se=i(Gt,"LI",{});var Ni=s(Se);kl=a(Ni,"Add content of other files"),Ni.forEach(l),Gt.forEach(l),ui.forEach(l),Al=c(_),De=i(_,"LI",{});var Vi=s(De);Rl=a(Vi,"Return multiple completions (add suggestions from history)"),Vi.forEach(l),Pl=c(_),B=i(_,"LI",{});var hi=s(B);Cl=a(hi,"Improve detection of already existing symbols at the end of a completion"),g=i(hi,"UL",{});var Qt=s(g);ge=i(Qt,"LI",{});var Bi=s(ge);Ml=a(Bi,"Reduce chance of repeating already existing symbols"),Bi.forEach(l),Ul=c(Qt),He=i(Qt,"LI",{});var zi=s(He);ql=a(zi,"Reduce completion stopping because of false detection of already existing symbols"),zi.forEach(l),Qt.forEach(l),hi.forEach(l),Ol=c(_),z=i(_,"LI",{});var _i=s(z);Sl=a(_i,"Custom completion stopping"),H=i(_i,"UL",{});var Jt=s(H);Fe=i(Jt,"LI",{});var Gi=s(Fe);Dl=a(Gi,"Stop completion after n lines"),Gi.forEach(l),gl=c(Jt),G=i(Jt,"LI",{});var vi=s(G);Hl=a(vi,"Detect bracket/brace/parenthesis imbalance and stop/don’t stop"),F=i(vi,"UL",{});var Xt=s(F);Te=i(Xt,"LI",{});var Qi=s(Te);Fl=a(Qi,"Missing closing bracket -> don’t stop"),Qi.forEach(l),Tl=c(Xt),$e=i(Xt,"LI",{});var Ji=s($e);$l=a(Ji,"Improve detection of already existing symbols at the end of a completion based on this"),Ji.forEach(l),Xt.forEach(l),vi.forEach(l),Jt.forEach(l),_i.forEach(l),Wl=c(_),Q=i(_,"LI",{});var Ei=s(Q);jl=a(Ei,"First line preview"),We=i(Ei,"UL",{});var Xi=s(We);je=i(Xi,"LI",{});var Yi=s(je);Kl=a(Yi,"Preview the first line (and maybe more) of the completion while completion is still ongoing"),Yi.forEach(l),Xi.forEach(l),Ei.forEach(l),Nl=c(_),Ke=i(_,"LI",{});var Zi=s(Ke);Vl=a(Zi,"Enable/Disable llm completion for specific filetypes"),Zi.forEach(l),Bl=c(_),Ne=i(_,"LI",{});var es=s(Ne);zl=a(es,"Fix Error where completion is not diplayed"),es.forEach(l),_.forEach(l),wt=c(t),J=i(t,"H2",{});var ts=s(J);Gl=a(ts,"Extension Settings"),ts.forEach(l),xt=c(t),h=i(t,"UL",{});var v=s(h);X=i(v,"LI",{});var Li=s(X);Ve=i(Li,"CODE",{});var ls=s(Ve);Ql=a(ls,"localcompletion.active_endpoint"),ls.forEach(l),Jl=a(Li,": The URL of the API which is used for generating the code completion"),Li.forEach(l),Xl=c(v),Y=i(v,"LI",{});var bi=s(Y);Be=i(bi,"CODE",{});var os=s(Be);Yl=a(os,"localcompletion.endpoints"),os.forEach(l),Zl=a(bi,": List of URL endpoints"),bi.forEach(l),eo=c(v),Z=i(v,"LI",{});var Ii=s(Z);ze=i(Ii,"CODE",{});var is=s(ze);to=a(is,"localcompletion.temperature"),is.forEach(l),lo=a(Ii,": Temperature of the LLM"),Ii.forEach(l),oo=c(v),ee=i(v,"LI",{});var yi=s(ee);Ge=i(yi,"CODE",{});var ss=s(Ge);io=a(ss,"localcompletion.max_tokens"),ss.forEach(l),so=a(yi,": Maximum number of tokens in the response"),yi.forEach(l),no=c(v),te=i(v,"LI",{});var wi=s(te);Qe=i(wi,"CODE",{});var ns=s(Qe);ao=a(ns,"localcompletion.stop_sequences"),ns.forEach(l),ro=a(wi,": Additional stop sequences (max. 2)"),wi.forEach(l),co=c(v),le=i(v,"LI",{});var xi=s(le);Je=i(xi,"CODE",{});var as=s(Je);fo=a(as,"localcompletion.reduce_calls"),as.forEach(l),po=a(xi,": Reduce API calls with various strategies (e.g. skip completion if last symbol was a letter)"),xi.forEach(l),mo=c(v),oe=i(v,"LI",{});var ki=s(oe);Xe=i(ki,"CODE",{});var rs=s(Xe);uo=a(rs,"localcompletion.skip_autocomplete_widget"),rs.forEach(l),ho=a(ki,": Skip completion if autocomplete widget is active"),ki.forEach(l),_o=c(v),ie=i(v,"LI",{});var Ai=s(ie);Ye=i(Ai,"CODE",{});var cs=s(Ye);vo=a(cs,"localcompletion.completion_timeout"),cs.forEach(l),Eo=a(Ai,": Minimum time between keystrokes (in ms) before sending a completion request (Reduces API calls, which are closed immediately after)"),Ai.forEach(l),v.forEach(l),kt=c(t),se=i(t,"H2",{});var fs=s(se);Lo=a(fs,"Known Issues"),fs.forEach(l),At=c(t),ne=i(t,"P",{});var ps=s(ne);bo=a(ps,"The extension does not yet support a custom API key. This means it only works for APIs which do not need a key."),ps.forEach(l),Rt=c(t),ae=i(t,"P",{});var ds=s(ae);Io=a(ds,"Model switching is not supported at the moment as most local tools don’t support that property either."),ds.forEach(l),Pt=c(t),re=i(t,"H2",{});var ms=s(re);yo=a(ms,"Release Notes"),ms.forEach(l),Ct=c(t),ce=i(t,"H3",{});var us=s(ce);wo=a(us,"0.1.2 (WIP)"),us.forEach(l),Mt=c(t),fe=i(t,"UL",{});var hs=s(fe);Ze=i(hs,"LI",{});var _s=s(Ze);xo=a(_s,"Add dynamic stopping based on line count and code balance"),_s.forEach(l),hs.forEach(l),Ut=c(t),pe=i(t,"H3",{});var vs=s(pe);ko=a(vs,"0.1.1"),vs.forEach(l),qt=c(t),U=i(t,"UL",{});var Yt=s(U);et=i(Yt,"LI",{});var Es=s(et);Ao=a(Es,"Fix race condition error which crashed the extension"),Es.forEach(l),Ro=c(Yt),tt=i(Yt,"LI",{});var Ls=s(tt);Po=a(Ls,"Fix extra space at the start of single line completion"),Ls.forEach(l),Yt.forEach(l),Ot=c(t),de=i(t,"H3",{});var bs=s(de);Co=a(bs,"0.1.0"),bs.forEach(l),St=c(t),me=i(t,"UL",{});var Is=s(me);lt=i(Is,"LI",{});var ys=s(lt);Mo=a(ys,"Publish to Visual Studio Marketplace"),ys.forEach(l),Is.forEach(l),Dt=c(t),ue=i(t,"H3",{});var ws=s(ue);Uo=a(ws,"0.0.5"),ws.forEach(l),gt=c(t),k=i(t,"UL",{});var ye=s(k);ot=i(ye,"LI",{});var xs=s(ot);qo=a(xs,"Increase time between keystrokes before requesting a new completion"),xs.forEach(l),Oo=c(ye),it=i(ye,"LI",{});var ks=s(it);So=a(ks,"Show inline completion even if autocomplet widget is active (can be disabled)"),ks.forEach(l),Do=c(ye),st=i(ye,"LI",{});var As=s(st);go=a(As,"Fix bug where sometimes a running completion would not be stopped if a new completion is triggered"),As.forEach(l),ye.forEach(l),Ht=c(t),he=i(t,"H3",{});var Rs=s(he);Ho=a(Rs,"0.0.4"),Rs.forEach(l),Ft=c(t),I=i(t,"UL",{});var q=s(I);nt=i(q,"LI",{});var Ps=s(nt);Fo=a(Ps,"Distinguish between single line and multiline completion by checking text after the cursor"),Ps.forEach(l),To=c(q),at=i(q,"LI",{});var Cs=s(at);$o=a(Cs,"Add ‘\\n’ to stop token for single line"),Cs.forEach(l),Wo=c(q),rt=i(q,"LI",{});var Ms=s(rt);jo=a(Ms,"Reduce repetition of already existing symbols (like ’}’ or ’;’) at the end of a completion"),Ms.forEach(l),Ko=c(q),ct=i(q,"LI",{});var Us=s(ct);No=a(Us,"Remove completion from history for new line (most predictions where totally wrong)"),Us.forEach(l),q.forEach(l),Tt=c(t),_e=i(t,"H3",{});var qs=s(_e);Vo=a(qs,"0.0.3"),qs.forEach(l),$t=c(t),L=i(t,"UL",{});var P=s(L);ft=i(P,"LI",{});var Os=s(ft);Bo=a(Os,"Rework handling of old responses"),Os.forEach(l),zo=c(P),pt=i(P,"LI",{});var Ss=s(pt);Go=a(Ss,"Only call new completion if input deviates from previous completion"),Ss.forEach(l),Qo=c(P),ve=i(P,"LI",{});var Ri=s(ve);Jo=a(Ri,"Add new Command: "),dt=i(Ri,"STRONG",{});var Ds=s(dt);Xo=a(Ds,"Regenerate"),Ds.forEach(l),Ri.forEach(l),Yo=c(P),mt=i(P,"LI",{});var gs=s(mt);Zo=a(gs,"Custom stop sequences"),gs.forEach(l),ei=c(P),ut=i(P,"LI",{});var Hs=s(ut);ti=a(Hs,"Optionally reduce API calls (enabled by default)"),Hs.forEach(l),P.forEach(l),Wt=c(t),Ee=i(t,"H3",{});var Fs=s(Ee);li=a(Fs,"0.0.2"),Fs.forEach(l),jt=c(t),Le=i(t,"UL",{});var Ts=s(Le);ht=i(Ts,"LI",{});var $s=s(ht);oi=a($s,"Reduce unnecessary requests"),$s.forEach(l),Ts.forEach(l),Kt=c(t),be=i(t,"H3",{});var Ws=s(be);ii=a(Ws,"0.0.1"),Ws.forEach(l),Nt=c(t),A=i(t,"UL",{});var we=s(A);_t=i(we,"LI",{});var js=s(_t);si=a(js,"Add basic completion"),js.forEach(l),ni=c(we),T=i(we,"LI",{});var Zt=s(T);ai=a(Zt,"Save "),vt=i(Zt,"CODE",{});var Ks=s(vt);ri=a(Ks,"10"),Ks.forEach(l),ci=a(Zt," old responses to reduce LLM requests"),Zt.forEach(l),fi=c(we),Et=i(we,"LI",{});var Ns=s(Et);pi=a(Ns,"Add some settings to configure the extension"),Ns.forEach(l),we.forEach(l),Vt=c(t),Bt=i(t,"HR",{}),this.h()},h(){zs(S,"href","https://github.com/oobabooga/text-generation-webui"),zs(S,"rel","nofollow")},m(t,f){p(t,d,f),e(d,y),p(t,w,f),p(t,x,f),e(x,m),p(t,b,f),p(t,C,f),e(C,O),e(O,el),e(O,S),e(S,tl),e(O,ll),p(t,Lt,f),p(t,W,f),e(W,ol),p(t,bt,f),p(t,E,f),e(E,xe),e(xe,il),e(E,sl),e(E,ke),e(ke,nl),e(E,al),e(E,Ae),e(Ae,rl),e(E,cl),e(E,j),e(j,fl),e(j,M),e(M,Re),e(Re,pl),e(M,dl),e(M,Pe),e(Pe,ml),e(M,ul),e(M,Ce),e(Ce,hl),e(E,_l),e(E,Me),e(Me,vl),p(t,It,f),p(t,K,f),e(K,El),p(t,yt,f),p(t,u,f),e(u,N),e(N,Ll),e(N,Ue),e(Ue,qe),e(qe,bl),e(u,Il),e(u,V),e(V,yl),e(V,D),e(D,Oe),e(Oe,wl),e(D,xl),e(D,Se),e(Se,kl),e(u,Al),e(u,De),e(De,Rl),e(u,Pl),e(u,B),e(B,Cl),e(B,g),e(g,ge),e(ge,Ml),e(g,Ul),e(g,He),e(He,ql),e(u,Ol),e(u,z),e(z,Sl),e(z,H),e(H,Fe),e(Fe,Dl),e(H,gl),e(H,G),e(G,Hl),e(G,F),e(F,Te),e(Te,Fl),e(F,Tl),e(F,$e),e($e,$l),e(u,Wl),e(u,Q),e(Q,jl),e(Q,We),e(We,je),e(je,Kl),e(u,Nl),e(u,Ke),e(Ke,Vl),e(u,Bl),e(u,Ne),e(Ne,zl),p(t,wt,f),p(t,J,f),e(J,Gl),p(t,xt,f),p(t,h,f),e(h,X),e(X,Ve),e(Ve,Ql),e(X,Jl),e(h,Xl),e(h,Y),e(Y,Be),e(Be,Yl),e(Y,Zl),e(h,eo),e(h,Z),e(Z,ze),e(ze,to),e(Z,lo),e(h,oo),e(h,ee),e(ee,Ge),e(Ge,io),e(ee,so),e(h,no),e(h,te),e(te,Qe),e(Qe,ao),e(te,ro),e(h,co),e(h,le),e(le,Je),e(Je,fo),e(le,po),e(h,mo),e(h,oe),e(oe,Xe),e(Xe,uo),e(oe,ho),e(h,_o),e(h,ie),e(ie,Ye),e(Ye,vo),e(ie,Eo),p(t,kt,f),p(t,se,f),e(se,Lo),p(t,At,f),p(t,ne,f),e(ne,bo),p(t,Rt,f),p(t,ae,f),e(ae,Io),p(t,Pt,f),p(t,re,f),e(re,yo),p(t,Ct,f),p(t,ce,f),e(ce,wo),p(t,Mt,f),p(t,fe,f),e(fe,Ze),e(Ze,xo),p(t,Ut,f),p(t,pe,f),e(pe,ko),p(t,qt,f),p(t,U,f),e(U,et),e(et,Ao),e(U,Ro),e(U,tt),e(tt,Po),p(t,Ot,f),p(t,de,f),e(de,Co),p(t,St,f),p(t,me,f),e(me,lt),e(lt,Mo),p(t,Dt,f),p(t,ue,f),e(ue,Uo),p(t,gt,f),p(t,k,f),e(k,ot),e(ot,qo),e(k,Oo),e(k,it),e(it,So),e(k,Do),e(k,st),e(st,go),p(t,Ht,f),p(t,he,f),e(he,Ho),p(t,Ft,f),p(t,I,f),e(I,nt),e(nt,Fo),e(I,To),e(I,at),e(at,$o),e(I,Wo),e(I,rt),e(rt,jo),e(I,Ko),e(I,ct),e(ct,No),p(t,Tt,f),p(t,_e,f),e(_e,Vo),p(t,$t,f),p(t,L,f),e(L,ft),e(ft,Bo),e(L,zo),e(L,pt),e(pt,Go),e(L,Qo),e(L,ve),e(ve,Jo),e(ve,dt),e(dt,Xo),e(L,Yo),e(L,mt),e(mt,Zo),e(L,ei),e(L,ut),e(ut,ti),p(t,Wt,f),p(t,Ee,f),e(Ee,li),p(t,jt,f),p(t,Le,f),e(Le,ht),e(ht,oi),p(t,Kt,f),p(t,be,f),e(be,ii),p(t,Nt,f),p(t,A,f),e(A,_t),e(_t,si),e(A,ni),e(A,T),e(T,ai),e(T,vt),e(vt,ri),e(T,ci),e(A,fi),e(A,Et),e(Et,pi),p(t,Vt,f),p(t,Bt,f)},p:nn,d(t){t&&l(d),t&&l(w),t&&l(x),t&&l(b),t&&l(C),t&&l(Lt),t&&l(W),t&&l(bt),t&&l(E),t&&l(It),t&&l(K),t&&l(yt),t&&l(u),t&&l(wt),t&&l(J),t&&l(xt),t&&l(h),t&&l(kt),t&&l(se),t&&l(At),t&&l(ne),t&&l(Rt),t&&l(ae),t&&l(Pt),t&&l(re),t&&l(Ct),t&&l(ce),t&&l(Mt),t&&l(fe),t&&l(Ut),t&&l(pe),t&&l(qt),t&&l(U),t&&l(Ot),t&&l(de),t&&l(St),t&&l(me),t&&l(Dt),t&&l(ue),t&&l(gt),t&&l(k),t&&l(Ht),t&&l(he),t&&l(Ft),t&&l(I),t&&l(Tt),t&&l(_e),t&&l($t),t&&l(L),t&&l(Wt),t&&l(Ee),t&&l(jt),t&&l(Le),t&&l(Kt),t&&l(be),t&&l(Nt),t&&l(A),t&&l(Vt),t&&l(Bt)}}}function cn($){let d,y;const w=[$[0],Gs];let x={$$slots:{default:[rn]},$$scope:{ctx:$}};for(let m=0;m<w.length;m+=1)x=Pi(x,w[m]);return d=new an({props:x}),{c(){Ys(d.$$.fragment)},l(m){Zs(d.$$.fragment,m)},m(m,b){en(d,m,b),y=!0},p(m,[b]){const C=b&1?tn(w,[b&1&&Vs(m[0]),b&0&&Vs(Gs)]):{};b&2&&(C.$$scope={dirty:b,ctx:m}),d.$set(C)},i(m){y||(ln(d.$$.fragment,m),y=!0)},o(m){on(d.$$.fragment,m),y=!1},d(m){sn(d,m)}}}const Gs={description:"A VS Code extension for local, inline LLM based code completion using OpenAI compatible APIs like Oobabooga WebUI",image:"/articles/pcb_buttons.png",layout:"project",repository:"https://github.com/lufixSch/LocalCompletion",repository_icon:"github",status:"wip",title:"LocalCompletion",update:"https://raw.githubusercontent.com/lufixSch/LocalCompletion/main/README.md"};function fn($,d,y){return $.$$set=w=>{y(0,d=Pi(Pi({},d),Bs(w)))},d=Bs(d),[d]}class mn extends Qs{constructor(d){super(),Js(this,d,fn,cn,Xs,{})}}export{mn as default,Gs as metadata};
